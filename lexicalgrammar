// Lexical grammar for j--
// Copyright 2013 Bill Campbell, Swami Iyer and Bahar Akbal-Delibas

// Whitespace -- ignored
" "|"\t"|"\n"|"\r"|"\f"

// Single line comment -- ignored
"//" {~("\n"|"\r")} ("\n"|"\r"["\n"])

// Multi-line comment -- ignored
"/*" {~("*/")} "*/"

// Reserved words
ABSTRACT	::= "abstract" 
BOOLEAN	    ::= "boolean" 
BREAK	    ::= "break" 
BYTE	    ::= "byte" 
CASE	    ::= "case" 
CATCH	    ::= "catch" 
CHAR	    ::= "char" 
CLASS	    ::= "class" 
CONST	    ::= "const" 
CONTINUE	::= "continue" 
DEFAULT	    ::= "default"
DO          ::= "do"
DOUBLE	    ::= "double"
ELSE	    ::= "else"
EXTENDS	    ::= "extends"
FALSE	    ::= "false"
FINAL	    ::= "final"
FINALLY 	::= "finally"
FLOAT	    ::= "float"
FOR	        ::= "for"
GOTO	    ::= "goto"
IF	        ::= "if"
IMPLEMENTS	::= "implements"
IMPORT	    ::= "import"
INSTANCEOF	::= "instanceof"
INT	        ::= "int"
INTERFACE	::= "interface"
LONG	    ::= "long"
NATIVE	    ::= "native"
NEW	        ::= "new"
NULL	    ::= "null"
PACKAGE	    ::= "package"
PRIVATE	    ::= "private"
PROTECTED	::= "protected"
PUBLIC	    ::= "public"
RETURN	    ::= "return"
SHORT	    ::= "short"
STATIC	    ::= "static"
STRICTFP	::= "strictfp"
SUPER	    ::= "super"
SWITCH	    ::= "switch"
SYNCHRONIZED::= "synchronized"
THIS	    ::= "this"
THROW	    ::= "throw"
THROWS	    ::= "throws"
TRANSIENT	::= "transient"
TRUE	    ::= "true"
TRY	        ::= "try"
VOID	    ::= "void"
VOLATILE	::= "volatile"
WHILE	    ::= "while"

// Operators
ASSIGN       ::= "="
EQUAL        ::= "=="
GT           ::= ">"
INC          ::= "++"
LAND         ::= "&&"
LOR          ::= "||"
LE           ::= "<="
SE           ::= ">="
LNOT         ::= "!"
MINUS        ::= "-"
PLUS         ::= "+"
PLUS_ASSIGN  ::= "+="
STAR         ::= "*"
DIV          ::= "/"
REM          ::= "%"
USHR         ::= ">>>"
BOR          ::= "|"
BAND         ::= "&"
BXOR         ::= "^"
BNOT         ::= "~"
SHR          ::= ">>"
SHL          ::= "<<"
OR_ASSIGN    ::= "|="
COND         ::= "?"
DIV_ASSIGN   ::= "/="
USHR_ASSIGN  ::= ">>>="
SHR_ASSIGN   ::= ">>="
SHL_ASSIGN   ::= "<<="
NOT_EQUALS   ::= "!="
STAR_ASSIGN  ::= "*="
MINUS_ASSIGN ::= "-="
REM_ASSIGN   ::= "%="
<<<<<<< HEAD
DEC         ::= "--"
XOR_ASSIGN  ::= "^="
=======
DEC          ::= "--"
>>>>>>> a1d67978972c65d2583c5be24c75e87689e2067f


// Separators
COMMA       ::= ","
DOT         ::= "."
LBRACK      ::= "["
LCURLY      ::= "{"
LPAREN      ::= "("
RBRACK      ::= "]"
RCURLY      ::= "}"
RPAREN      ::= ")"
SEMI        ::= ";"

// Identifiers
IDENTIFIER ::= ("a"-"z"|"A"-"Z"|"_"|"$") {"a"-"z"|"A"-"Z"|"_"|"0"-"9"|"$"}

// Literals
INT_LITERAL    ::= "0" | ("1"-"9") {"0"-"9"}
ESC            ::= "\\" ("n"|"r"|"t"|"b"|"f"|"'"|"\""|"\\")
STRING_LITERAL ::= "\"" {ESC | ~("\""|"\\"|"\n"|"\r")} "\""
CHAR_LITERAL   ::= "'" (ESC | ~("'"|"\n"|"\r"|"\\")) "'"

// End of file
EOF            ::= "<end of file>"

 
